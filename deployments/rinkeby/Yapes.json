{
  "address": "0x3917e629d443887718A4b89Cc4b468140ed9f585",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_benefactor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Fee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_benefactor",
          "type": "address"
        }
      ],
      "name": "changeBenefactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "noTaxWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6dd63cbe0fe9a0627ee79c89eb30e320792afd8a92af8eccf31a9e3effa3c128",
  "receipt": {
    "to": null,
    "from": "0xEFc3a819695932394D89b8AF6f49e0D89EDf9A40",
    "contractAddress": "0x3917e629d443887718A4b89Cc4b468140ed9f585",
    "transactionIndex": 15,
    "gasUsed": "2198729",
    "logsBloom": "0x00000000000000000000000000000000000000100000000000800000000000000000000000000000001000000000000000000000000100000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000010",
    "blockHash": "0x7ab1c2a9991c6ebfd63f68e4daeaac61c298c3f7fdbb47c69de36ccaf9846426",
    "transactionHash": "0x6dd63cbe0fe9a0627ee79c89eb30e320792afd8a92af8eccf31a9e3effa3c128",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 10480173,
        "transactionHash": "0x6dd63cbe0fe9a0627ee79c89eb30e320792afd8a92af8eccf31a9e3effa3c128",
        "address": "0x3917e629d443887718A4b89Cc4b468140ed9f585",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000efc3a819695932394d89b8af6f49e0d89edf9a40"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x7ab1c2a9991c6ebfd63f68e4daeaac61c298c3f7fdbb47c69de36ccaf9846426"
      }
    ],
    "blockNumber": 10480173,
    "cumulativeGasUsed": "3627439",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "5a3cc2930d8dcc16f910f315a6772aba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_benefactor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_benefactor\",\"type\":\"address\"}],\"name\":\"changeBenefactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noTaxWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Fee(uint256)\":{\"details\":\"Emitted when tokens are moved from one account to another and fee `amount` is taken.\"}},\"kind\":\"dev\",\"methods\":{\"addMinter(address)\":{\"details\":\"Adds address to the minters.\",\"params\":{\"account\":\"- address to add\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}.\",\"params\":{\"amount\":\"- amount of allowed tokens to spend\",\"spender\":\"- address that will be allowed to spend tokens\"}},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(address,uint256)\":{\"details\":\"Burns `amount` of tokens from ``recipient`.\",\"params\":{\"account\":\"- recipient of burn\",\"amount\":\"- amount to transfer\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`).\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller.\",\"params\":{\"spender\":\"- address which will be spending tokens\",\"subtractedValue\":\"- decrease of value which will be allowed to spend\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller.\",\"params\":{\"addedValue\":\"- increase in value which will be allowed to spend\",\"spender\":\"- address which will be spending tokens\"}},\"mint(address,uint256)\":{\"details\":\"Mints `amount` of tokens  to `recipient`.\",\"params\":{\"account\":\"- recipient of mint\",\"amount\":\"- amount to transfer\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeFromWhitelist(address)\":{\"details\":\"Removes address from the notTaxWhitelist.\",\"params\":{\"account\":\"- address to remove\"}},\"removeMinter(address)\":{\"details\":\"Removes address from the minters.\",\"params\":{\"account\":\"- address to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}.\",\"params\":{\"amount\":\"- amount to transfer\",\"to\":\"- recipient of transfer\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}.\",\"params\":{\"amount\":\"- amount to transfer\",\"from\":\"- sender of transfer\",\"to\":\"- recipient of transfer\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"whitelist(address)\":{\"details\":\"Adds address to the notTaxWhitelist.\",\"params\":{\"account\":\"- address to add\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Yapes.sol\":\"Yapes\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Yapes.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Yapes is IERC20, Ownable {\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) public noTaxWhitelist;\\n    mapping(address => bool) public minters;\\n    uint256 fee;\\n    address benefactor;\\n\\n\\n    string private _name;\\n    string private _symbol;\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev Emitted when tokens are moved from one account to\\n     * another and fee `amount` is taken.\\n     */\\n    event Fee( uint256 amount);\\n\\n    modifier onlyMinter() {\\n        require(minters[msg.sender] || owner() == msg.sender);\\n        _;\\n    }\\n\\n    constructor(address _benefactor) public {\\n        _name = \\\"Yapes Token\\\";\\n        _symbol = \\\"YAPES\\\";\\n        benefactor = _benefactor;\\n    }\\n\\n    function changeBenefactor(address _benefactor) public {\\n        benefactor = _benefactor;\\n    }\\n\\n    /**\\n     * @dev Adds address to the notTaxWhitelist.\\n     *\\n     * @param account - address to add\\n     */\\n    function whitelist(address account) public onlyOwner {\\n        noTaxWhitelist[account] = true;\\n    }\\n\\n\\n    /**\\n     * @dev Removes address from the notTaxWhitelist.\\n     *\\n     * @param account - address to remove\\n     */\\n    function removeFromWhitelist(address account) public onlyOwner {\\n        noTaxWhitelist[account] = false;\\n    }\\n\\n\\n\\n    /**\\n     * @dev Adds address to the minters.\\n     *\\n     * @param account - address to add\\n     */\\n    function addMinter(address account) public onlyOwner {\\n        minters[account] = true;\\n    }\\n\\n\\n    /**\\n     * @dev Removes address from the minters.\\n     *\\n     * @param account - address to remove\\n     */\\n    function removeMinter(address account) public onlyOwner {\\n        minters[account] = false;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * @param to - recipient of transfer\\n     * @param amount - amount to transfer\\n     */\\n    function transfer(address to, uint256 amount) public override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * @param from - sender of transfer\\n     * @param to - recipient of transfer\\n     * @param amount - amount to transfer\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * @param spender - address which will be spending tokens\\n     * @param addedValue - increase in value which will be allowed to spend\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * @param spender - address which will be spending tokens\\n     * @param subtractedValue - decrease of value which will be allowed to spend\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n    unchecked {\\n        _approve(owner, spender, currentAllowance - subtractedValue);\\n    }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Mints `amount` of tokens  to `recipient`.\\n     *\\n     * @param account - recipient of mint\\n     * @param amount - amount to transfer\\n     */\\n    function mint(address account, uint256 amount) public onlyMinter {\\n        _mint(account, amount);\\n    }\\n\\n    /**\\n     * @dev Burns `amount` of tokens from ``recipient`.\\n     *\\n     * @param account - recipient of burn\\n     * @param amount - amount to transfer\\n     */\\n    function burn(address account, uint256 amount) public onlyMinter {\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * @param spender - address that will be allowed to spend tokens\\n     * @param amount - amount of allowed tokens to spend\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *  @param account - account to which token is minted\\n     *  @param amount - amount of minted token\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *  @param account - account from which token is burned\\n     *  @param amount - amount of burned token\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    unchecked {\\n        _balances[account] = accountBalance - amount;\\n    }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * @param from - sender of transfer\\n     * @param to - recipient of transfer\\n     * @param amount - amount to transfer\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n\\n        uint256 tax = 0;\\n        if(!noTaxWhitelist[from]){\\n            tax = amount * 15 / 100;\\n        }\\n\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        require(fromBalance >= amount + tax, \\\"ERC20: unable to pay fee from transfer\\\");\\n    unchecked {\\n        _balances[from] = fromBalance - (amount + tax);\\n    }\\n        _balances[to] += amount;\\n        _balances[benefactor] += tax/3;\\n\\n        emit Transfer(from, to, amount);\\n        emit Fee(fee);\\n\\n    }\\n\\n    /**\\n * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * @param owner - address which tokens will be spent\\n     * @param spender - address which will be spending tokens\\n     * @param amount - amount of tokens to be spent\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * @param owner - owner of the tokens\\n     * @param spender - spender of the tokens\\n     * @param amount - amount of the tokens to send\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - amount);\\n        }\\n        }\\n    }\\n\\n    /**\\n * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     */\\n    function decimals() public view returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n}\\n\",\"keccak256\":\"0x92c5ddd1a44845df9e2780724b2fe37fdc8c537cd3396361a9a916b7c06bb624\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002934380380620029348339818101604052810190620000379190620002ce565b620000576200004b6200013b60201b60201c565b6200014360201b60201c565b6040518060400160405280600b81526020017f596170657320546f6b656e00000000000000000000000000000000000000000081525060079080519060200190620000a492919062000207565b506040518060400160405280600581526020017f594150455300000000000000000000000000000000000000000000000000000081525060089080519060200190620000f292919062000207565b5080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620003ad565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805462000215906200032e565b90600052602060002090601f01602090048101928262000239576000855562000285565b82601f106200025457805160ff191683800117855562000285565b8280016001018555821562000285579182015b828111156200028457825182559160200191906001019062000267565b5b50905062000294919062000298565b5090565b5b80821115620002b357600081600090555060010162000299565b5090565b600081519050620002c88162000393565b92915050565b600060208284031215620002e157600080fd5b6000620002f184828501620002b7565b91505092915050565b600062000307826200030e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060028204905060018216806200034757607f821691505b602082108114156200035e576200035d62000364565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6200039e81620002fa565b8114620003aa57600080fd5b50565b61257780620003bd6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c35780639dc29fac1161007c5780639dc29fac1461038a578063a457c2d7146103a6578063a9059cbb146103d6578063dd62ed3e14610406578063f2fde38b14610436578063f46eccc4146104525761014d565b8063715018a6146102f05780638ab1d681146102fa5780638da5cb5b1461031657806395d89b4114610334578063983b2d56146103525780639b19251a1461036e5761014d565b80633092afd5116101155780633092afd51461020a578063313ce56714610226578063395093511461024457806340c10f1914610274578063498372f11461029057806370a08231146102c05761014d565b806306fdde0314610152578063095ea7b31461017057806318160ddd146101a057806320a9d623146101be57806323b872dd146101da575b600080fd5b61015a610482565b6040516101679190611d01565b60405180910390f35b61018a60048036038101906101859190611a53565b610514565b6040516101979190611ce6565b60405180910390f35b6101a8610537565b6040516101b59190611ec3565b60405180910390f35b6101d860048036038101906101d3919061199f565b610541565b005b6101f460048036038101906101ef9190611a04565b610585565b6040516102019190611ce6565b60405180910390f35b610224600480360381019061021f919061199f565b6105b4565b005b61022e61068b565b60405161023b9190611ede565b60405180910390f35b61025e60048036038101906102599190611a53565b610694565b60405161026b9190611ce6565b60405180910390f35b61028e60048036038101906102899190611a53565b61073e565b005b6102aa60048036038101906102a5919061199f565b6107df565b6040516102b79190611ce6565b60405180910390f35b6102da60048036038101906102d5919061199f565b6107ff565b6040516102e79190611ec3565b60405180910390f35b6102f8610848565b005b610314600480360381019061030f919061199f565b6108d0565b005b61031e6109a7565b60405161032b9190611ccb565b60405180910390f35b61033c6109d0565b6040516103499190611d01565b60405180910390f35b61036c6004803603810190610367919061199f565b610a62565b005b6103886004803603810190610383919061199f565b610b39565b005b6103a4600480360381019061039f9190611a53565b610c10565b005b6103c060048036038101906103bb9190611a53565b610cb1565b6040516103cd9190611ce6565b60405180910390f35b6103f060048036038101906103eb9190611a53565b610d9b565b6040516103fd9190611ce6565b60405180910390f35b610420600480360381019061041b91906119c8565b610dbe565b60405161042d9190611ec3565b60405180910390f35b610450600480360381019061044b919061199f565b610e45565b005b61046c6004803603810190610467919061199f565b610f3d565b6040516104799190611ce6565b60405180910390f35b606060078054610491906120b2565b80601f01602080910402602001604051908101604052809291908181526020018280546104bd906120b2565b801561050a5780601f106104df5761010080835404028352916020019161050a565b820191906000526020600020905b8154815290600101906020018083116104ed57829003601f168201915b5050505050905090565b60008061051f610f5d565b905061052c818585610f65565b600191505092915050565b6000600954905090565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080610590610f5d565b905061059d858285611130565b6105a88585856111bc565b60019150509392505050565b6105bc610f5d565b73ffffffffffffffffffffffffffffffffffffffff166105da6109a7565b73ffffffffffffffffffffffffffffffffffffffff1614610630576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062790611e03565b60405180910390fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60006012905090565b60008061069f610f5d565b9050610733818585600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461072e9190611f15565b610f65565b600191505092915050565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806107c857503373ffffffffffffffffffffffffffffffffffffffff166107b06109a7565b73ffffffffffffffffffffffffffffffffffffffff16145b6107d157600080fd5b6107db82826115a7565b5050565b60036020528060005260406000206000915054906101000a900460ff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610850610f5d565b73ffffffffffffffffffffffffffffffffffffffff1661086e6109a7565b73ffffffffffffffffffffffffffffffffffffffff16146108c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bb90611e03565b60405180910390fd5b6108ce60006116f0565b565b6108d8610f5d565b73ffffffffffffffffffffffffffffffffffffffff166108f66109a7565b73ffffffffffffffffffffffffffffffffffffffff161461094c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094390611e03565b60405180910390fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600880546109df906120b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0b906120b2565b8015610a585780601f10610a2d57610100808354040283529160200191610a58565b820191906000526020600020905b815481529060010190602001808311610a3b57829003601f168201915b5050505050905090565b610a6a610f5d565b73ffffffffffffffffffffffffffffffffffffffff16610a886109a7565b73ffffffffffffffffffffffffffffffffffffffff1614610ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad590611e03565b60405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b610b41610f5d565b73ffffffffffffffffffffffffffffffffffffffff16610b5f6109a7565b73ffffffffffffffffffffffffffffffffffffffff1614610bb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bac90611e03565b60405180910390fd5b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680610c9a57503373ffffffffffffffffffffffffffffffffffffffff16610c826109a7565b73ffffffffffffffffffffffffffffffffffffffff16145b610ca357600080fd5b610cad82826117b4565b5050565b600080610cbc610f5d565b90506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015610d82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7990611e83565b60405180910390fd5b610d8f8286868403610f65565b60019250505092915050565b600080610da6610f5d565b9050610db38185856111bc565b600191505092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610e4d610f5d565b73ffffffffffffffffffffffffffffffffffffffff16610e6b6109a7565b73ffffffffffffffffffffffffffffffffffffffff1614610ec1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb890611e03565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2890611d83565b60405180910390fd5b610f3a816116f0565b50565b60046020528060005260406000206000915054906101000a900460ff1681565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610fd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcc90611e63565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611045576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103c90611da3565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516111239190611ec3565b60405180910390a3505050565b600061113c8484610dbe565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146111b657818110156111a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119f90611dc3565b60405180910390fd5b6111b58484848403610f65565b5b50505050565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661122b576064600f8361121e9190611f9c565b6112289190611f6b565b90505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561129b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129290611e43565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561130b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130290611d23565b60405180910390fd5b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611392576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138990611de3565b60405180910390fd5b818361139e9190611f15565b8110156113e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d790611d43565b60405180910390fd5b8183018103600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114779190611f15565b9250508190555060038261148b9190611f6b565b60016000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114fb9190611f15565b925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161155f9190611ec3565b60405180910390a37f557809284da7314475b1582804ae28e5f1349efc1fe970ea25d50fce75eb4f436005546040516115989190611ec3565b60405180910390a15050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160e90611ea3565b60405180910390fd5b80600960008282546116299190611f15565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461167f9190611f15565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516116e49190611ec3565b60405180910390a35050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611824576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181b90611e23565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156118ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a290611d63565b60405180910390fd5b818103600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600960008282546119039190611ff6565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516119689190611ec3565b60405180910390a3505050565b60008135905061198481612513565b92915050565b6000813590506119998161252a565b92915050565b6000602082840312156119b157600080fd5b60006119bf84828501611975565b91505092915050565b600080604083850312156119db57600080fd5b60006119e985828601611975565b92505060206119fa85828601611975565b9150509250929050565b600080600060608486031215611a1957600080fd5b6000611a2786828701611975565b9350506020611a3886828701611975565b9250506040611a498682870161198a565b9150509250925092565b60008060408385031215611a6657600080fd5b6000611a7485828601611975565b9250506020611a858582860161198a565b9150509250929050565b611a988161202a565b82525050565b611aa78161203c565b82525050565b6000611ab882611ef9565b611ac28185611f04565b9350611ad281856020860161207f565b611adb81612171565b840191505092915050565b6000611af3602383611f04565b9150611afe82612182565b604082019050919050565b6000611b16602683611f04565b9150611b21826121d1565b604082019050919050565b6000611b39602283611f04565b9150611b4482612220565b604082019050919050565b6000611b5c602683611f04565b9150611b678261226f565b604082019050919050565b6000611b7f602283611f04565b9150611b8a826122be565b604082019050919050565b6000611ba2601d83611f04565b9150611bad8261230d565b602082019050919050565b6000611bc5602683611f04565b9150611bd082612336565b604082019050919050565b6000611be8602083611f04565b9150611bf382612385565b602082019050919050565b6000611c0b602183611f04565b9150611c16826123ae565b604082019050919050565b6000611c2e602583611f04565b9150611c39826123fd565b604082019050919050565b6000611c51602483611f04565b9150611c5c8261244c565b604082019050919050565b6000611c74602583611f04565b9150611c7f8261249b565b604082019050919050565b6000611c97601f83611f04565b9150611ca2826124ea565b602082019050919050565b611cb681612068565b82525050565b611cc581612072565b82525050565b6000602082019050611ce06000830184611a8f565b92915050565b6000602082019050611cfb6000830184611a9e565b92915050565b60006020820190508181036000830152611d1b8184611aad565b905092915050565b60006020820190508181036000830152611d3c81611ae6565b9050919050565b60006020820190508181036000830152611d5c81611b09565b9050919050565b60006020820190508181036000830152611d7c81611b2c565b9050919050565b60006020820190508181036000830152611d9c81611b4f565b9050919050565b60006020820190508181036000830152611dbc81611b72565b9050919050565b60006020820190508181036000830152611ddc81611b95565b9050919050565b60006020820190508181036000830152611dfc81611bb8565b9050919050565b60006020820190508181036000830152611e1c81611bdb565b9050919050565b60006020820190508181036000830152611e3c81611bfe565b9050919050565b60006020820190508181036000830152611e5c81611c21565b9050919050565b60006020820190508181036000830152611e7c81611c44565b9050919050565b60006020820190508181036000830152611e9c81611c67565b9050919050565b60006020820190508181036000830152611ebc81611c8a565b9050919050565b6000602082019050611ed86000830184611cad565b92915050565b6000602082019050611ef36000830184611cbc565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611f2082612068565b9150611f2b83612068565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611f6057611f5f6120e4565b5b828201905092915050565b6000611f7682612068565b9150611f8183612068565b925082611f9157611f90612113565b5b828204905092915050565b6000611fa782612068565b9150611fb283612068565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611feb57611fea6120e4565b5b828202905092915050565b600061200182612068565b915061200c83612068565b92508282101561201f5761201e6120e4565b5b828203905092915050565b600061203582612048565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561209d578082015181840152602081019050612082565b838111156120ac576000848401525b50505050565b600060028204905060018216806120ca57607f821691505b602082108114156120de576120dd612142565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20756e61626c6520746f20706179206665652066726f6d20747260008201527f616e736665720000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61251c8161202a565b811461252757600080fd5b50565b61253381612068565b811461253e57600080fd5b5056fea26469706673582212201a6d13be2ce3ddd5be7a4e6fca2c02d747277ebbbe2b2a7d65a05ae98df42e0664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c35780639dc29fac1161007c5780639dc29fac1461038a578063a457c2d7146103a6578063a9059cbb146103d6578063dd62ed3e14610406578063f2fde38b14610436578063f46eccc4146104525761014d565b8063715018a6146102f05780638ab1d681146102fa5780638da5cb5b1461031657806395d89b4114610334578063983b2d56146103525780639b19251a1461036e5761014d565b80633092afd5116101155780633092afd51461020a578063313ce56714610226578063395093511461024457806340c10f1914610274578063498372f11461029057806370a08231146102c05761014d565b806306fdde0314610152578063095ea7b31461017057806318160ddd146101a057806320a9d623146101be57806323b872dd146101da575b600080fd5b61015a610482565b6040516101679190611d01565b60405180910390f35b61018a60048036038101906101859190611a53565b610514565b6040516101979190611ce6565b60405180910390f35b6101a8610537565b6040516101b59190611ec3565b60405180910390f35b6101d860048036038101906101d3919061199f565b610541565b005b6101f460048036038101906101ef9190611a04565b610585565b6040516102019190611ce6565b60405180910390f35b610224600480360381019061021f919061199f565b6105b4565b005b61022e61068b565b60405161023b9190611ede565b60405180910390f35b61025e60048036038101906102599190611a53565b610694565b60405161026b9190611ce6565b60405180910390f35b61028e60048036038101906102899190611a53565b61073e565b005b6102aa60048036038101906102a5919061199f565b6107df565b6040516102b79190611ce6565b60405180910390f35b6102da60048036038101906102d5919061199f565b6107ff565b6040516102e79190611ec3565b60405180910390f35b6102f8610848565b005b610314600480360381019061030f919061199f565b6108d0565b005b61031e6109a7565b60405161032b9190611ccb565b60405180910390f35b61033c6109d0565b6040516103499190611d01565b60405180910390f35b61036c6004803603810190610367919061199f565b610a62565b005b6103886004803603810190610383919061199f565b610b39565b005b6103a4600480360381019061039f9190611a53565b610c10565b005b6103c060048036038101906103bb9190611a53565b610cb1565b6040516103cd9190611ce6565b60405180910390f35b6103f060048036038101906103eb9190611a53565b610d9b565b6040516103fd9190611ce6565b60405180910390f35b610420600480360381019061041b91906119c8565b610dbe565b60405161042d9190611ec3565b60405180910390f35b610450600480360381019061044b919061199f565b610e45565b005b61046c6004803603810190610467919061199f565b610f3d565b6040516104799190611ce6565b60405180910390f35b606060078054610491906120b2565b80601f01602080910402602001604051908101604052809291908181526020018280546104bd906120b2565b801561050a5780601f106104df5761010080835404028352916020019161050a565b820191906000526020600020905b8154815290600101906020018083116104ed57829003601f168201915b5050505050905090565b60008061051f610f5d565b905061052c818585610f65565b600191505092915050565b6000600954905090565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080610590610f5d565b905061059d858285611130565b6105a88585856111bc565b60019150509392505050565b6105bc610f5d565b73ffffffffffffffffffffffffffffffffffffffff166105da6109a7565b73ffffffffffffffffffffffffffffffffffffffff1614610630576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062790611e03565b60405180910390fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60006012905090565b60008061069f610f5d565b9050610733818585600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461072e9190611f15565b610f65565b600191505092915050565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806107c857503373ffffffffffffffffffffffffffffffffffffffff166107b06109a7565b73ffffffffffffffffffffffffffffffffffffffff16145b6107d157600080fd5b6107db82826115a7565b5050565b60036020528060005260406000206000915054906101000a900460ff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610850610f5d565b73ffffffffffffffffffffffffffffffffffffffff1661086e6109a7565b73ffffffffffffffffffffffffffffffffffffffff16146108c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bb90611e03565b60405180910390fd5b6108ce60006116f0565b565b6108d8610f5d565b73ffffffffffffffffffffffffffffffffffffffff166108f66109a7565b73ffffffffffffffffffffffffffffffffffffffff161461094c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094390611e03565b60405180910390fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600880546109df906120b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0b906120b2565b8015610a585780601f10610a2d57610100808354040283529160200191610a58565b820191906000526020600020905b815481529060010190602001808311610a3b57829003601f168201915b5050505050905090565b610a6a610f5d565b73ffffffffffffffffffffffffffffffffffffffff16610a886109a7565b73ffffffffffffffffffffffffffffffffffffffff1614610ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad590611e03565b60405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b610b41610f5d565b73ffffffffffffffffffffffffffffffffffffffff16610b5f6109a7565b73ffffffffffffffffffffffffffffffffffffffff1614610bb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bac90611e03565b60405180910390fd5b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680610c9a57503373ffffffffffffffffffffffffffffffffffffffff16610c826109a7565b73ffffffffffffffffffffffffffffffffffffffff16145b610ca357600080fd5b610cad82826117b4565b5050565b600080610cbc610f5d565b90506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015610d82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7990611e83565b60405180910390fd5b610d8f8286868403610f65565b60019250505092915050565b600080610da6610f5d565b9050610db38185856111bc565b600191505092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610e4d610f5d565b73ffffffffffffffffffffffffffffffffffffffff16610e6b6109a7565b73ffffffffffffffffffffffffffffffffffffffff1614610ec1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb890611e03565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2890611d83565b60405180910390fd5b610f3a816116f0565b50565b60046020528060005260406000206000915054906101000a900460ff1681565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610fd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcc90611e63565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611045576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103c90611da3565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516111239190611ec3565b60405180910390a3505050565b600061113c8484610dbe565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146111b657818110156111a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119f90611dc3565b60405180910390fd5b6111b58484848403610f65565b5b50505050565b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661122b576064600f8361121e9190611f9c565b6112289190611f6b565b90505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561129b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129290611e43565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561130b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130290611d23565b60405180910390fd5b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611392576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138990611de3565b60405180910390fd5b818361139e9190611f15565b8110156113e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d790611d43565b60405180910390fd5b8183018103600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114779190611f15565b9250508190555060038261148b9190611f6b565b60016000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114fb9190611f15565b925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161155f9190611ec3565b60405180910390a37f557809284da7314475b1582804ae28e5f1349efc1fe970ea25d50fce75eb4f436005546040516115989190611ec3565b60405180910390a15050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160e90611ea3565b60405180910390fd5b80600960008282546116299190611f15565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461167f9190611f15565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516116e49190611ec3565b60405180910390a35050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611824576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181b90611e23565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156118ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a290611d63565b60405180910390fd5b818103600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600960008282546119039190611ff6565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516119689190611ec3565b60405180910390a3505050565b60008135905061198481612513565b92915050565b6000813590506119998161252a565b92915050565b6000602082840312156119b157600080fd5b60006119bf84828501611975565b91505092915050565b600080604083850312156119db57600080fd5b60006119e985828601611975565b92505060206119fa85828601611975565b9150509250929050565b600080600060608486031215611a1957600080fd5b6000611a2786828701611975565b9350506020611a3886828701611975565b9250506040611a498682870161198a565b9150509250925092565b60008060408385031215611a6657600080fd5b6000611a7485828601611975565b9250506020611a858582860161198a565b9150509250929050565b611a988161202a565b82525050565b611aa78161203c565b82525050565b6000611ab882611ef9565b611ac28185611f04565b9350611ad281856020860161207f565b611adb81612171565b840191505092915050565b6000611af3602383611f04565b9150611afe82612182565b604082019050919050565b6000611b16602683611f04565b9150611b21826121d1565b604082019050919050565b6000611b39602283611f04565b9150611b4482612220565b604082019050919050565b6000611b5c602683611f04565b9150611b678261226f565b604082019050919050565b6000611b7f602283611f04565b9150611b8a826122be565b604082019050919050565b6000611ba2601d83611f04565b9150611bad8261230d565b602082019050919050565b6000611bc5602683611f04565b9150611bd082612336565b604082019050919050565b6000611be8602083611f04565b9150611bf382612385565b602082019050919050565b6000611c0b602183611f04565b9150611c16826123ae565b604082019050919050565b6000611c2e602583611f04565b9150611c39826123fd565b604082019050919050565b6000611c51602483611f04565b9150611c5c8261244c565b604082019050919050565b6000611c74602583611f04565b9150611c7f8261249b565b604082019050919050565b6000611c97601f83611f04565b9150611ca2826124ea565b602082019050919050565b611cb681612068565b82525050565b611cc581612072565b82525050565b6000602082019050611ce06000830184611a8f565b92915050565b6000602082019050611cfb6000830184611a9e565b92915050565b60006020820190508181036000830152611d1b8184611aad565b905092915050565b60006020820190508181036000830152611d3c81611ae6565b9050919050565b60006020820190508181036000830152611d5c81611b09565b9050919050565b60006020820190508181036000830152611d7c81611b2c565b9050919050565b60006020820190508181036000830152611d9c81611b4f565b9050919050565b60006020820190508181036000830152611dbc81611b72565b9050919050565b60006020820190508181036000830152611ddc81611b95565b9050919050565b60006020820190508181036000830152611dfc81611bb8565b9050919050565b60006020820190508181036000830152611e1c81611bdb565b9050919050565b60006020820190508181036000830152611e3c81611bfe565b9050919050565b60006020820190508181036000830152611e5c81611c21565b9050919050565b60006020820190508181036000830152611e7c81611c44565b9050919050565b60006020820190508181036000830152611e9c81611c67565b9050919050565b60006020820190508181036000830152611ebc81611c8a565b9050919050565b6000602082019050611ed86000830184611cad565b92915050565b6000602082019050611ef36000830184611cbc565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611f2082612068565b9150611f2b83612068565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611f6057611f5f6120e4565b5b828201905092915050565b6000611f7682612068565b9150611f8183612068565b925082611f9157611f90612113565b5b828204905092915050565b6000611fa782612068565b9150611fb283612068565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611feb57611fea6120e4565b5b828202905092915050565b600061200182612068565b915061200c83612068565b92508282101561201f5761201e6120e4565b5b828203905092915050565b600061203582612048565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561209d578082015181840152602081019050612082565b838111156120ac576000848401525b50505050565b600060028204905060018216806120ca57607f821691505b602082108114156120de576120dd612142565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20756e61626c6520746f20706179206665652066726f6d20747260008201527f616e736665720000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61251c8161202a565b811461252757600080fd5b50565b61253381612068565b811461253e57600080fd5b5056fea26469706673582212201a6d13be2ce3ddd5be7a4e6fca2c02d747277ebbbe2b2a7d65a05ae98df42e0664736f6c63430008040033",
  "devdoc": {
    "events": {
      "Fee(uint256)": {
        "details": "Emitted when tokens are moved from one account to another and fee `amount` is taken."
      }
    },
    "kind": "dev",
    "methods": {
      "addMinter(address)": {
        "details": "Adds address to the minters.",
        "params": {
          "account": "- address to add"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}.",
        "params": {
          "amount": "- amount of allowed tokens to spend",
          "spender": "- address that will be allowed to spend tokens"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(address,uint256)": {
        "details": "Burns `amount` of tokens from ``recipient`.",
        "params": {
          "account": "- recipient of burn",
          "amount": "- amount to transfer"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`)."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller.",
        "params": {
          "spender": "- address which will be spending tokens",
          "subtractedValue": "- decrease of value which will be allowed to spend"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller.",
        "params": {
          "addedValue": "- increase in value which will be allowed to spend",
          "spender": "- address which will be spending tokens"
        }
      },
      "mint(address,uint256)": {
        "details": "Mints `amount` of tokens  to `recipient`.",
        "params": {
          "account": "- recipient of mint",
          "amount": "- amount to transfer"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeFromWhitelist(address)": {
        "details": "Removes address from the notTaxWhitelist.",
        "params": {
          "account": "- address to remove"
        }
      },
      "removeMinter(address)": {
        "details": "Removes address from the minters.",
        "params": {
          "account": "- address to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}.",
        "params": {
          "amount": "- amount to transfer",
          "to": "- recipient of transfer"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}.",
        "params": {
          "amount": "- amount to transfer",
          "from": "- sender of transfer",
          "to": "- recipient of transfer"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "whitelist(address)": {
        "details": "Adds address to the notTaxWhitelist.",
        "params": {
          "account": "- address to add"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Yapes.sol:Yapes",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 216,
        "contract": "contracts/Yapes.sol:Yapes",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 222,
        "contract": "contracts/Yapes.sol:Yapes",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 226,
        "contract": "contracts/Yapes.sol:Yapes",
        "label": "noTaxWhitelist",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 230,
        "contract": "contracts/Yapes.sol:Yapes",
        "label": "minters",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 232,
        "contract": "contracts/Yapes.sol:Yapes",
        "label": "fee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 234,
        "contract": "contracts/Yapes.sol:Yapes",
        "label": "benefactor",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/Yapes.sol:Yapes",
        "label": "_name",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 238,
        "contract": "contracts/Yapes.sol:Yapes",
        "label": "_symbol",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 240,
        "contract": "contracts/Yapes.sol:Yapes",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}